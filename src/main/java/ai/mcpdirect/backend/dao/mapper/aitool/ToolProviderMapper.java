package ai.mcpdirect.backend.dao.mapper.aitool;

import ai.mcpdirect.backend.dao.entity.aitool.AIPortToolProvider;
import ai.mcpdirect.backend.dao.entity.aitool.AIPortToolProviderWithToolsApp;
import org.apache.ibatis.annotations.*;
import org.apache.ibatis.jdbc.SQL; // Required for building dynamic SQL

import java.util.List;

//@Mapper // Indicates that this is a MyBatis mapper interface
public interface ToolProviderMapper {

    // Common SELECT clause to avoid repetition
    String SELECT_FIELDS = "id, user_id userId, provider_id providerId, tools, last_updated lastUpdated, app_id appId, device";
    String TABLE_NAME = "aitool.tool_provider";

    /**
     * Inserts a new AIPortToolsProvider record into the database.
     * Assumes 'id' is generated by the database.
     * UseGeneratedKeys and keyProperty are used to retrieve the generated ID back into the object.
     */
    @Insert("INSERT INTO " + TABLE_NAME + " (id,user_id, provider_id, tools,hash, last_updated, app_id, device) " +
            "VALUES (#{id},#{userId}, #{providerId}, #{tools},#{hash}, #{lastUpdated}, #{appId}, #{device})")
    // If your DB supports it and you want to get the generated ID back:
    // @Options(useGeneratedKeys = true, keyProperty = "id")
    int insertToolsProvider(AIPortToolProvider provider);

    /**
     * Updates the 'tools' and 'lastUpdated' fields of an existing
     * AIPortToolsProvider record based on its ID.
     */
    @Update("UPDATE " + TABLE_NAME + " SET tools = #{tools}, last_updated = #{lastUpdated} WHERE id = #{id}")
    int updateToolsProviderById(@Param("id")long id);

    @Update("UPDATE " + TABLE_NAME +"\n"+
            "SET tools = #{tools},hash=#{hash}, last_updated = #{lastUpdated}\n" +
            "WHERE user_id = #{userId} and provider_id=#{providerId}")
    int updateToolsProviderByProviderId(
            @Param("userId")long userId,
            @Param("providerId")String providerId,
            @Param("tools")String tools,
            @Param("hash") long hash,
            @Param("lastUpdated")long lastUpdated
    );

    /**
     * Selects all AIPortToolsProvider records for a given user ID.
     */
    @Select("SELECT " + SELECT_FIELDS + " FROM " + TABLE_NAME + " WHERE user_id = #{userId}")
    List<AIPortToolProvider> selectToolsProviderByUserId(@Param("userId") long userId);

    /**
     * Selects a single AIPortToolsProvider record by user ID and provider ID.
     */
    @Select("SELECT " + SELECT_FIELDS + " FROM " + TABLE_NAME + " WHERE user_id = #{userId} AND provider_id = #{providerId}")
    AIPortToolProvider selectToolsProviderByUserIdAndProviderId(@Param("userId") long userId, @Param("providerId") String providerId);

    @Select("SELECT hash FROM " + TABLE_NAME + " WHERE user_id = #{userId} AND provider_id = #{providerId}")
    Long selectToolsProviderHash(@Param("userId") long userId,
                                 @Param("providerId") String providerId);

    /**
     * Selects all AIPortToolsProvider records for a given user ID that were
     * last updated at a specific timestamp (or later/earlier, adjust SQL as needed).
     */
    @Select("SELECT " + SELECT_FIELDS + " FROM " + TABLE_NAME + " WHERE user_id = #{userId} AND last_updated > #{lastUpdated}")
    List<AIPortToolProvider> selectToolsProviderByUserIdAndLastUpdated(@Param("userId") long userId, @Param("lastUpdated") long lastUpdated);

    @Select("""
            SELECT p.id, p.user_id userId,p.device, p.provider_id providerId, p.tools, last_updated lastUpdated, app_id appId,
            a.name, a.description, a.summary, a.rating
            FROM aitool.tool_provider p
            LEFT JOIN aitool.tool_app a ON p.app_id = a.id
            WHERE p.user_id=#{userId}""")
    List<AIPortToolProviderWithToolsApp> selectToolsProviderWithToolsAppByUserId(long userId);


    // --- Dynamic SQL Methods using SQL Providers ---

    /**
     * Dynamically selects AIPortToolsProvider records based on non-default values
     * in the provided AIPortToolsProvider object.
     * Uses a SQL Provider to build the dynamic query string.
     */
    @SelectProvider(type = AIPortToolsProviderSqlBuilder.class, method = "buildSelectDynamicSql")
    List<AIPortToolProvider> selectDynamic(AIPortToolProvider provider);

    /**
     * Dynamically updates fields of an existing AIPortToolsProvider record.
     * Only non-default (non-zero for primitives, non-null for objects) fields in the provided object
     * (excluding ID) will be updated.
     * The record to update is identified by its 'id' field.
     * Uses a SQL Provider to build the dynamic update string.
     */
    @UpdateProvider(type = AIPortToolsProviderSqlBuilder.class, method = "buildUpdateDynamicSql")
    int updateDynamic(AIPortToolProvider provider);


    /**
     * Inner static class to build dynamic SQL statements.
     * MyBatis will instantiate this class and call the specified method
     * to get the SQL string.
     *
     * Note on primitive types (long): For optional fields that are primitive (like userId, lastUpdated),
     * you can't check for 'null'. The common approach is to use a specific sentinel value (e.g., 0 or -1)
     * to indicate "do not include this in the query/update", or, more robustly, use their Wrapper classes
     * (Long instead of long) in the bean if null checks are desired for optional parameters.
     * This example assumes 0 for long fields means 'not provided' for dynamic queries.
     */
    static class AIPortToolsProviderSqlBuilder {

        // Builds dynamic SELECT SQL
        public String buildSelectDynamicSql(final AIPortToolProvider provider) {
            return new SQL() {{
                SELECT(SELECT_FIELDS);
                FROM(TABLE_NAME);
                if (provider.userId != 0) { // Assuming 0 means not provided for userId
                    WHERE("user_id = #{userId}");
                }
                if (provider.providerId != null && !provider.providerId.isEmpty()) {
                    WHERE("provider_id = #{providerId}");
                }
                if (provider.lastUpdated != 0) { // Assuming 0 means not provided for lastUpdated
                    WHERE("last_updated = #{lastUpdated}");
                }
                if (provider.appId != 0) {
                    WHERE("app_id = #{appId}");
                }
                if (provider.device != null && !provider.device.isEmpty()) {
                    WHERE("device = #{device}");
                }
                // Add more dynamic conditions as needed
            }}.toString();
        }

        // Builds dynamic UPDATE SQL
        public String buildUpdateDynamicSql(final AIPortToolProvider provider) {
            return new SQL() {{
                UPDATE(TABLE_NAME);
                if (provider.userId != 0) {
                    SET("user_id = #{userId}");
                }
                if (provider.providerId != null) {
                    SET("provider_id = #{providerId}");
                }
                if (provider.tools != null) {
                    SET("tools = #{tools}");
                }
                if (provider.lastUpdated != 0) {
                    SET("last_updated = #{lastUpdated}");
                }
                if (provider.appId != 0) {
                    SET("app_id = #{appId}");
                }
                if (provider.device != null) {
                    SET("device = #{device}");
                }
                // Add more fields to update dynamically

                WHERE("id = #{id}"); // Update by ID is mandatory for this method
            }}.toString();
        }
    }
}
